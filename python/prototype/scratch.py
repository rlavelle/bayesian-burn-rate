#!/usr/bin/env python3# -*- coding: utf-8 -*-"""@author: rowanlavelle"""#%%import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as snssns.set_theme()%matplotlib auto#%%np.log(2500)#%%mu = np.log(2500)var = 0.01s = np.random.normal(mu, np.sqrt(var), 10000)#%%plt.clf()plt.hist(np.exp(s), bins=150)plt.show()#%%alpha = 2beta = 0.5s = np.random.gamma(alpha, beta, 10000)plt.clf()plt.hist(s, bins=150)plt.show()#%%theta = np.random.normal(mu, np.sqrt(var))sigma = np.random.gamma(alpha, beta)s = np.random.lognormal(theta, sigma, 100)plt.clf()plt.hist(s, bins=10)plt.show()theta, sigma#%%fpath = "/Users/rowanlavelle/Documents/Projects/bayesian-burn-rate/data/results.csv";df = pd.read_csv(fpath)#%%plt.clf()plt.hist(df.ypred, bins=150)plt.show()#%%df.head()#%%# rent switch in theta funcdef sigmoid(x, x0=0, k=1, m=0, L=1.5):    sig = L/(1+np.exp(-1*k*(x-x0))) - m    rel = np.concatenate([np.arange(0,0.05,(0.05/10)), np.ones(x.shape[0]-10)])    return np.where(x < 10, rel, sig)#%%x = np.arange(0,50,1)v = sigmoid(x,x0=10, k=1, m=0.5)plt.clf()plt.plot(x,v)plt.show()#%%N = 10000paths = []for i in range(N):    tot = 62260    path = [tot]    j = 0    while tot > 0:        if np.random.random() < v[j]:            s = np.random.choice(df.ypred.values) + 2300        else:            s = np.random.choice(df.ypred.values)                tot -= s        path.append(tot)        j += 1    paths.append(path)        #%%mx = 0for path in paths:    if len(path) > mx:        mx = len(path)mx#%%mat = np.zeros((N,mx))#%%for i,path in enumerate(paths):    for j in range(len(path)):        mat[i][j] = path[j]        #%%msk = (mat <= 0).astype(int)#%%p = msk.sum(axis=0) / Np#%%        # between month 23 and month 28plt.clf()plt.plot(p[20:], marker='*')plt.show()#%%import numpy as npimport matplotlib.pyplot as pltimport matplotlib.dates as mdatesfrom datetime import datetime, timedeltafrom scipy.stats import normdef process_and_plot(matrix, start_month=8, start_year=2025):    """Process matrix and plot with monthly x-axis starting from September of start_year"""    processed = matrix.copy()        # Zero out negatives and everything after first negative    for row in processed:        neg_indices = np.where(row < 0)[0]        if len(neg_indices) > 0:            first_neg = neg_indices[0]            row[first_neg:] = 0        # Calculate statistics    col_means = np.mean(processed, axis=0)    col_stds = np.std(processed, axis=0)    n_columns = len(col_means)        # Create monthly x-axis starting from September of start_year    start_date = datetime(start_year, start_month + 1, 1)  # Next month after August    dates = [start_date + timedelta(days=30.44*i) for i in range(n_columns)]  # ~30.44 days/month        # Create plot    plt.figure(figsize=(12, 6))    ax = plt.gca()        # Plot column means    ax.plot(dates, col_means, 'b-', linewidth=2, label='Column Average')        # Plot sigma ranges    sigmas = [1, 2, 3]    colors = ['green', 'orange', 'red']    alpha_values = [0.3, 0.2, 0.1]        for sigma, color, alpha in zip(sigmas, colors, alpha_values):        upper = col_means + sigma * col_stds        lower = np.maximum(col_means - sigma * col_stds, 0)  # Don't go below 0        ax.fill_between(dates, lower, upper, color=color, alpha=alpha,                       label=f'{sigma}Ïƒ range')        # Format x-axis as months    ax.xaxis.set_major_locator(mdates.MonthLocator())    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))    plt.xticks(rotation=45)        # Add labels and title    plt.title('Monthly Projections Starting September 2025')    plt.xlabel('Month')    plt.ylabel('Value')    plt.legend()    plt.grid(True, alpha=0.3)        # Highlight first zero column if exists    first_zero_col = np.argmax(col_means == 0) if any(col_means == 0) else n_columns    if first_zero_col < n_columns:        ax.axvline(x=dates[first_zero_col], color='r', linestyle='--',                   label='First zero month')        plt.tight_layout()    plt.show()    return processed# Example usage:M = mxprocessed_matrix = process_and_plot(mat, start_month=8, start_year=2025)#%%\